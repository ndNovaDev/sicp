(define (dn x)
  (display x)
  (newline))
(define false #f)
(define true #t)

; **********************

(define (adder a1 a2 sum)
  (define (processNewValue)
    (cond ((and (hasValue a1) (hasValue a2))
           (setValue sum
                      (+ (getValue a1) (getValue a2))
                      me))
          ((and (hasValue a1) (hasValue sum))
           (setValue a2
                     (- (getValue sum) (getValue a1))
                     me))
          ((and (hasValue a2) (hasValue sum))
           (setValue a1
                     (- (getValue sum) (getValue a2))
                     me))))
  (define (processForgetValue)
    (forgetValue sum me)
    (forgetValue a1 me)
    (forgetValue a2 me)
    (processNewValue))
  (define (me request)
    (cond ((eq? request 'IHaveAValue)
           (processNewValue))
          ((eq? request 'ILostMyValue)
           (processForgetValue))
          (else
           (error "sb" "sb"))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (multiplier m1 m2 product)
  (define (processNewValue)
    (cond ((or (and (hasValue m1) (= (getValue m1) 0))
               (and (hasValue m2) (= (getValue m2) 0)))
           (setValue product 0 me))
          ((and (hasValue m1) (hasValue m2))
           (setValue product
                     (* (getValue m1) (getValue m2))
                     me))
          ((and (hasValue product) (hasValue m1))
           (setValue m2
                     (/ (getValue product) (getValue m1))
                     me))
          ((and (hasValue product) (hasValue m2))
           (setValue m1
                     (/ (getValue product) (getValue m2))
                     me))))
  (define (processForgetValue)
    (forgetValue product me)
    (forgetValue m1 me)
    (forgetValue m2 me)
    (processNewValue))
  (define (me request)
    (cond ((eq? request 'IHaveAValue)
           (processNewValue))
          ((eq? request 'ILostMyValue)
           (processForgetValue))
          (else
           (error "sb" "sb"))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "sb" "sb"))
  (connect connector me)
  (setValue connector value me)
  me)

(define (probe name connector)
  (define (printProbe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (processNewValue)
    (printProbe (getValue connector)))
  (define (processForgetValue)
    (printProbe "?"))
  (define (me request)
    (cond ((eq? request 'IHaveAValue)
           (processNewValue))
          ((eq? request 'ILostMyValue)
           (processForgetValue))
          (else
           (error "sb" "sb"))))
  (connect connector me)
  me)

(define (makeConnector)
  (let ((value false) (informant false) (constraints '()))
    (define (setMyValue newval setter)
      (cond ((not (hasValue me))
             (set! value newval)
             (set! informant setter)
             (forEachExcept setter
                            informAboutValue
                            constraints))
            ((not (= value newval))
             (error "sb" "sb"))
            (else 'ignored)))
    (define (forgetMyValue retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (forEachExcept retractor
                                informAboutNoValue
                                constraints))
          'ignored))
    (define (connect newConstraint)
      (if (not (memq newConstraint constraints))
          (set! constraints
                (cons newConstraint constraints)))
      (if (hasValue me)
          (informAboutValue newConstraint))
      'done)
    (define (me request)
      (cond ((eq? request 'hasValue)
             (if informant true false))
            ((eq? request 'value) value)
            ((eq? request 'setValue) setMyValue)
            ((eq? request 'forget) forgetMyValue)
            ((eq? request 'connect) connect)
            (else (error "sb" "sb"))))
    me))

(define (forEachExcept exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))

(define (informAboutValue constraint)
  (constraint 'IHaveAValue))
(define (informAboutNoValue constraint)
  (constraint 'ILostMyValue))

(define (hasValue connector)
  (connector 'hasValue))
(define (getValue connector)
  (connector 'value))
(define (setValue connector newValue informant)
  ((connector 'setValue) newValue informant))
(define (forgetValue connector retractor)
  ((connector 'forget) retractor))
(define (connect connector newConstraint)
  ((connector 'connect) newConstraint))


; ********************************



(exit)
