(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (abs n)
    (if (< n 0)
        (- n)
        n))
(define (make-rat n d)
  (let ((nd (* n d))
        (absN (abs n))
        (absD (abs d)))
       (let ((dec (if (< nd 0) - +))
             (g (gcd absN absD)))
            (cons (dec (/ absN g)) (/ absD g)))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom y)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

; ****************************************************

(define a (make-rat -4 8))
(define b (make-rat 1 2))
(print-rat (mul-rat a b))
(exit)
